from config import TOKEN
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from keyboards import kbrd_menu, inline_dove, inline_bluetit, inline_thrush, inline_sparrow, inline_woodpecker, inline_cardinal
from aiogram.contrib.fsm_storage.memory import MemoryStorage


from roboflow import Roboflow
rf = Roboflow(api_key="jyxqZLcJ27mR9wFxBpUJ")
project = rf.workspace().project("birds-detection-fld02")
model = project.version(2).model

bot = Bot(TOKEN)
storage = MemoryStorage()
dispatcher = Dispatcher(bot, storage=storage)

PROJECT_INFO = """
–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø—Ç–∏—Ü –ø–æ —Ñ–æ—Ç–æ.
_____________________________________
üì∏ 1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ç–∏—Ü 

ü¶Ö 2. –ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ç–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 

üìö 3. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –ø—Ç–∏—Ü–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ 

   –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –æ ..." 
_____________________________________

–í –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ:
ü§ù <b>–ù–∞–∑–∞—Ä–æ–≤ –ú.–°</b> : –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞, 

ü§ù <b>–ù–æ–≤–∏–∫–æ–≤. –í.–í.</b> : –ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è,

ü§ù <b>–ú–µ–ª—å–Ω–∏—Ü—ã–Ω –í.–í.</b> : –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞

ü§ù <b>–ü–æ–ª–∏–≤–æ–¥–∞ –ê.–Æ.</b> : –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
...

"""


START_TEXT = """
<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ç–∏—Ü üê¶‚Äç‚¨õÔ∏è</b>
"""


class InputState(StatesGroup):  
# –ö–ª–∞—Å—Å –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    input_state = State()


async def bot_startup(dispatcher):
    print('Bot is running ...')


async def bot_shutup(dispatcher):
    # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–∏—à–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    print('Bot has gone ...')


# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dispatcher.message_handler(Text(equals='–û –ø—Ä–æ–µ–∫—Ç–µ'))
async def proj_info(message: types.Message):
    await message.answer(text=f' {PROJECT_INFO} ',
                        parse_mode= "HTML")
    await message.delete()

# –í—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
@dispatcher.message_handler(commands=['start'])
async def get_keyboard(message: types.Message):
    await message.answer(text=START_TEXT, parse_mode='HTML', reply_markup=kbrd_menu)
    await bot.send_animation(chat_id=message.from_user.id, animation=open('img/presentation.gif', 'rb'))
    await message.delete()


@dispatcher.message_handler(content_types=['photo'])
async def get_photo(message: types.Message):   
    await message.photo[-1].download('model/file.jpg')
    prediction = model.predict('model/file.jpg', confidence=40, overlap=30).json()
    print(prediction)
    model.predict("model/file.jpg", confidence=40, overlap=30).save("model/prediction.jpg")
    await message.delete()
    await bot.send_photo(chat_id=message.from_user.id, photo=open('model/prediction.jpg', 'rb'))
    class_list = []
    try:
        if prediction['predictions'] == []:
                await message.answer(text="""–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç –ø—Ç–∏—Ü ü§∑... –í–µ–¥—å —Ç–∞–∫? ü´£""")
        for pred in prediction['predictions']:
            if pred['class'] not in class_list:
                if pred['class'] == "pigeon":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/pigeon.jpg', 'rb'), caption='–ì–æ–ª—É–±—å', reply_markup=inline_dove)
                    class_list.append(pred['class'])
                if pred['class'] == "tit":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/titmouse.jpg', 'rb'), caption='–°–∏–Ω–∏—Ü–∞', reply_markup=inline_bluetit)
                    class_list.append(pred['class'])

                if pred['class'] == "thrush":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/thrush.jpg', 'rb'), caption='–î—Ä–æ–∑–¥', reply_markup=inline_thrush,)
                    class_list.append(pred['class'])

                if pred['class'] == "sparrow":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/sparrow.jpg', 'rb'), caption='–í–æ—Ä–æ–±–µ–π', reply_markup=inline_sparrow)
                    class_list.append(pred['class'])
                    
                if pred['class'] == "woodpecker":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/woodpckr.jpg', 'rb'), caption='–î—è—Ç–µ–ª', reply_markup=inline_woodpecker)
                    class_list.append(pred['class'])

                if pred['class'] == "cardinal":
                    await bot.send_photo(chat_id=message.from_user.id, photo=open('img/cardinal.jpg', 'rb'), caption='–ö—Ä–∞—Å–Ω—ã–π –∫–∞—Ä–¥–∏–Ω–∞–ª', reply_markup=inline_cardinal)
                    class_list.append(pred['class'])
            
                
    except IndexError:
        await message.answer(text="""–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ—Ç –ø—Ç–∏—Ü ü§∑... –í–µ–¥—å —Ç–∞–∫? ü´£""")


if __name__ == '__main__':
    executor.start_polling(dispatcher=dispatcher,
                        on_startup=bot_startup,
                        skip_updates=True,
                        on_shutdown=bot_shutup)